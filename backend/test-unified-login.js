import axios from 'axios';

const API_BASE = 'http://localhost:3001/api';

async function testUnifiedLogin() {
  console.log('üîê Test du syst√®me de connexion unifi√©...');
  
  try {
    // 1. Test connexion admin
    console.log('\n1Ô∏è‚É£ Test connexion administrateur...');
    const adminLoginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@gamezone.com',
      password: 'admin123'
    });
    
    console.log('‚úÖ Connexion admin r√©ussie:');
    console.log(`   Type: ${adminLoginResponse.data.userType}`);
    console.log(`   Email: ${adminLoginResponse.data.user.email}`);
    
    const adminToken = adminLoginResponse.data.token;
    const adminHeaders = {
      'Authorization': `Bearer ${adminToken}`,
      'Content-Type': 'application/json'
    };

    // 2. Test profil admin
    console.log('\n2Ô∏è‚É£ Test r√©cup√©ration profil admin...');
    const adminProfileResponse = await axios.get(`${API_BASE}/auth/profile`, { headers: adminHeaders });
    console.log('‚úÖ Profil admin r√©cup√©r√©:', adminProfileResponse.data.userType);

    // 3. Test changement mot de passe admin
    console.log('\n3Ô∏è‚É£ Test changement mot de passe admin...');
    try {
      await axios.put(`${API_BASE}/auth/change-password`, {
        currentPassword: 'admin123',
        newPassword: 'newadmin123'
      }, { headers: adminHeaders });
      console.log('‚úÖ Mot de passe admin chang√©');

      // Remettre l'ancien mot de passe
      await axios.put(`${API_BASE}/auth/change-password`, {
        currentPassword: 'newadmin123',
        newPassword: 'admin123'
      }, { headers: adminHeaders });
      console.log('‚úÖ Mot de passe admin restaur√©');
    } catch (error) {
      console.log('‚ùå Erreur changement mot de passe admin:', error.response?.data?.message);
    }

    // 4. Cr√©er un compte client pour les tests
    console.log('\n4Ô∏è‚É£ Cr√©ation d\'un compte client pour les tests...');
    const registerResponse = await axios.post(`${API_BASE}/auth/register`, {
      nom: 'TestUser',
      prenom: 'Unified',
      email: 'unified.test@example.com',
      password: 'password123'
    });
    console.log('‚úÖ Compte client cr√©√©');

    // 5. Test connexion client avec le login unifi√©
    console.log('\n5Ô∏è‚É£ Test connexion client avec login unifi√©...');
    const clientLoginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'unified.test@example.com',
      password: 'password123'
    });
    
    console.log('‚úÖ Connexion client r√©ussie:');
    console.log(`   Type: ${clientLoginResponse.data.userType}`);
    console.log(`   Email: ${clientLoginResponse.data.user.email}`);
    
    const clientToken = clientLoginResponse.data.token;
    const clientHeaders = {
      'Authorization': `Bearer ${clientToken}`,
      'Content-Type': 'application/json'
    };

    // 6. Test profil client
    console.log('\n6Ô∏è‚É£ Test r√©cup√©ration profil client...');
    const clientProfileResponse = await axios.get(`${API_BASE}/auth/profile`, { headers: clientHeaders });
    console.log('‚úÖ Profil client r√©cup√©r√©:', clientProfileResponse.data.userType);

    // 7. Test changement mot de passe client
    console.log('\n7Ô∏è‚É£ Test changement mot de passe client...');
    await axios.put(`${API_BASE}/auth/change-password`, {
      currentPassword: 'password123',
      newPassword: 'newpassword123'
    }, { headers: clientHeaders });
    console.log('‚úÖ Mot de passe client chang√©');

    // 8. Test connexion avec nouveau mot de passe
    console.log('\n8Ô∏è‚É£ Test connexion avec nouveau mot de passe...');
    const newLoginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'unified.test@example.com',
      password: 'newpassword123'
    });
    console.log('‚úÖ Connexion avec nouveau mot de passe r√©ussie');

    const newClientToken = newLoginResponse.data.token;
    const newClientHeaders = {
      'Authorization': `Bearer ${newClientToken}`,
      'Content-Type': 'application/json'
    };

    // 9. Test suppression compte client
    console.log('\n9Ô∏è‚É£ Test suppression compte client...');
    await axios.delete(`${API_BASE}/auth/delete-account`, {
      headers: newClientHeaders,
      data: { password: 'newpassword123' }
    });
    console.log('‚úÖ Compte client supprim√©');

    // 10. V√©rifier que le compte n'existe plus
    console.log('\nüîü V√©rification suppression...');
    try {
      await axios.post(`${API_BASE}/auth/login`, {
        email: 'unified.test@example.com',
        password: 'newpassword123'
      });
      console.log('‚ùå Erreur: le compte devrait √™tre supprim√©');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Compte bien supprim√©');
      }
    }

    // 11. Test que l'admin ne peut pas supprimer son compte
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Test restriction suppression compte admin...');
    try {
      await axios.delete(`${API_BASE}/auth/delete-account`, {
        headers: adminHeaders,
        data: { password: 'admin123' }
      });
      console.log('‚ùå Erreur: l\'admin ne devrait pas pouvoir supprimer son compte');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Restriction admin confirm√©e');
      }
    }

    console.log('\nüéâ Tous les tests du login unifi√© sont pass√©s !');

  } catch (error) {
    console.error('‚ùå Erreur dans les tests:', error.response?.data || error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
    }
  }
}

// Ex√©cuter les tests
testUnifiedLogin();
